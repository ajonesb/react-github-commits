[{"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/index.js":"1","/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/App.js":"2","/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/reportWebVitals.js":"3","/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/CommitListComponent.js":"4","/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/SearchGitRepo.js":"5"},{"size":544,"mtime":1609555151117,"results":"6","hashOfConfig":"7"},{"size":315,"mtime":1609716512311,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609461198015,"results":"9","hashOfConfig":"7"},{"size":1158,"mtime":1609716452905,"results":"10","hashOfConfig":"7"},{"size":2680,"mtime":1609716495478,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j5jphv",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/index.js",[],"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/App.js",[],"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/reportWebVitals.js",[],["24","25"],"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/CommitListComponent.js",[],"/home/alan/Desktop/React Projects/React Github Commits/react-git-commits/src/SearchGitRepo.js",["26","27","28"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Card, Image, Icon } from \"semantic-ui-react\";\n\nfunction SearchGitRepo() {\n  const [name, setname] = useState(\"\");\n  const [userName, setUsername] = useState(\"\");\n  const [followers, setFollowers] = useState(\"\");\n  const [following, setFollowing] = useState(\"\");\n  const [repos, setRepos] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/ajonesb\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setData(data);\n      });\n  }, []);\n\n  const setData = ({\n    name,\n    login,\n    followers,\n    following,\n    public_repos,\n    avatar_url,\n  }) => {\n    setname(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  };\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) {\n          setError(data.message);\n        } else {\n          setData(data);\n          setError(null);\n        }\n      });\n  };\n\n  return (\n    <div>\n      <div className=\"navbar\">Github Search</div>\n      <div className=\"search\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              placeholder=\"Github user\"\n              name=\"github user\"\n              onChange={handleSearch}\n            />\n            <Form.Button content=\"Submit\" />\n          </Form.Group>\n        </Form>\n      </div>\n      {error ? (\n        <h1>{error}</h1>\n      ) : (\n        <div className=\"card\">\n          <Card>\n            <Image src={avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>{name}</Card.Header>\n              <Card.Header>{userName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {followers}Folllowers\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {repos}Repos\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {following}Following\n              </a>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchGitRepo;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":82,"column":15,"nodeType":"35","endLine":82,"endColumn":18},{"ruleId":"33","severity":1,"message":"34","line":88,"column":15,"nodeType":"35","endLine":88,"endColumn":18},{"ruleId":"33","severity":1,"message":"34","line":94,"column":15,"nodeType":"35","endLine":94,"endColumn":18},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]